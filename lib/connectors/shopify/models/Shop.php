<?php

namespace ShopifyConnector\connectors\shopify\models;

use ShopifyConnector\exceptions\api\UnexpectedResponseException;

/**
 * Model for information about a Shopify shop
 */
class Shop
{

	/**
	 * @var string Store for the shop's domain
	 */
	public string $domain;

	/**
	 * @var string Store for the shop's created date
	 */
	public string $created_at;

	/**
	 * @var string Store for the shop's country code
	 */
	public string $country_code;

	/**
	 * @var string Store for the parsed tax rate JSON. This is an empty json
	 * array by default, and is generated by calling {@see build_tax_rates()}
	 */
	public string $tax_rates_json = '[]';

	/**
	 * Model for information about a Shopify shop
	 *
	 * @param array $data Information about the Shopify shop to parse out.
	 * Expected keys are:
	 * <ul>
	 *   <li>`domain` (required)</li>
	 *   <li>`country_code` (required)</li>
	 *   <li>`created_at` (optional)</li>
	 * </ul>
	 * @throws UnexpectedResponseException On missing required keys from `$data`
	 */
	public function __construct(array $data)
	{
		if (!isset($data['domain'], $data['country_code'])) {
			throw new UnexpectedResponseException('Shopify', 'Shop data missing required fields');
		}

		$this->domain = $data['domain'];
		$this->created_at = $data['created_at'] ?? '2006-01-01'; # Default to start year of Shopify itself
		$this->country_code = $data['country_code'];
	}

	/**
	 * Build out the tax rates json based on the given country data.
	 * Will only include tax rates for countries whose codes are listed in
	 * the given `$requested_rates`.
	 *
	 * The tax rates are compiled and stored in the {@see tax_rates_json} property.
	 *
	 * @param array $country_data The country data returned by Shopify
	 * @param array $requested_rates The list of country codes to include
	 */
	public function build_tax_rates(array $country_data, array $requested_rates) : void
	{
		$rates = [];
		foreach ($country_data as $country) {
			if (!isset($country['tax'])) {
				continue;
			}
			if (!isset($country['code'])) {
				continue;
			}

			$ccode = strval($country['code']);
			if (!in_array($ccode, $requested_rates, true)) {
				continue;
			}

			$rates[$ccode] = [
				'name' => $country['name'] ?? '',
				'tax' => $country['tax'],
				'provinces' => array_map(fn($i) => [
					'tax' => $i['tax'] ?? '',
					'name' => $i['name'] ?? '',
					'tax_name' => $i['tax_name'] ?? '',
				], $country['provinces'] ?? []),
			];
		}

		$this->tax_rates_json = json_encode($rates);
	}

}

